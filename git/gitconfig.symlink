[alias]
	# View abbreviated SHA, description, and history graph of the latest 20 commits
	l = log --pretty=oneline -n 20 --graph --abbrev-commit
	# View the current working tree status using the short format
	s = status -s
	# Show the diff between the latest commit and the current state
	d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"
	# `git di $number` shows the diff between the state `$number` revisions ago and the current state
	di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"
	# Pull in remote changes for the current repository and all its submodules
	p = !"git pull; git submodule foreach git pull origin master"
	# Clone a repository including all submodules
	c = clone --recursive
	# Commit all changes
	ca = !git add -A && git commit -av
	# Switch to a branch, creating it if necessary
	go = checkout -B
	# Show verbose output about tags, branches or remotes
	tags = tag -l
	branches = branch -a
	remotes = remote -v
	# Credit an author on the latest commit
	credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"
	# Interactive rebase with the given number of latest commits
	reb = "!r() { git rebase -i HEAD~$1; }; r"
	ci = commit
	co = checkout
	st = status
	sw = switch
	br = branch
	cp = cherry-pick
	sh = show --stat --oneline
	lg = "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
	previewized = !sh -c \"git clone git@gitlab.xhtmlized.com:previewized/$1.git\" -
	purr = pull -r -p
	# for github remotes
	pr  = "!f() { git fetch -fu ${2:-$(git remote |grep ^upstream || echo origin)} refs/pull/$1/head:pr/$1 && git checkout pr/$1; }; f"
	pr-clean = "!git for-each-ref refs/heads/pr/* --format='%(refname)' | while read ref ; do branch=${ref#refs/heads/} ; git branch -D $branch ; done"
	# for bitbucket/stash remotes
	spr  = "!f() { git fetch -fu ${2:-$(git remote |grep ^upstream || echo origin)} refs/pull-requests/$1/from:pr/$1 && git checkout pr/$1; }; f"
	# removes local branches that are gone (e.g. already merged to current branch)
	remove-local-branches = "!f() { git fetch -p && for branch in `git branch -vv | grep ': gone]' | awk '{print $1}'`; do git branch -D $branch; done; }; f"

[user]
	name = Michał Pierzchała
	email = thymikee@gmail.com

[core]
	# Use custom `.gitignore` and `.gitattributes`
	excludesfile = ~/.gitignore
	attributesfile = ~/.gitattributes
	editor = vim
	# pager = $HOME/.scripts/diff-highlight
	pager = delta --paging never
	ignorecase = false
[color]
	# Use colors in Git commands that are capable of colored output when outputting to the terminal
	ui = auto
[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green
[color "diff"]
	meta = yellow bold
	frag = magenta bold
	old = red bold
	new = green bold
[color "status"]
	added = yellow
	changed = green
	untracked = cyan

[merge]
	# Include summaries of merged commits in newly created merge commit messages
	log = true

[push]
	default = current
	autoSetupRemote = true

[homebrew]
	analyticsdisabled = true
	default = current

[diff]
	compactionHeuristic = 1

# [pager]
#   log = /usr/local/share/git-core/contrib/diff-highlight/diff-highlight
#   show = /usr/local/share/git-core/contrib/diff-highlight/diff-highlight
#   diff = /usr/local/share/git-core/contrib/diff-highlight/diff-highlight

[interactive]
	# diffFilter = /usr/local/share/git-core/contrib/diff-highlight/diff-highlight
	diffFilter = delta --color-only

[http]
	version = HTTP/1.1

[delta]
	line-numbers = true

[advice]
	detachedHead = false
